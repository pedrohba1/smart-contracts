/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Bribe, BribeInterface } from "../Bribe";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_schellingAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_toBribe",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "acceptBribe",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "bribe",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimBribe",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "numParticipants",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "toReceiveBribe",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260405161084f38038061084f833981810160405281019061002591906100a4565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060018190555034600281905550505061014a565b6000815190506100898161011c565b92915050565b60008151905061009e81610133565b92915050565b600080604083850312156100b757600080fd5b60006100c58582860161007a565b92505060206100d68582860161008f565b9150509250929050565b60006100eb826100f2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b610125816100e0565b811461013057600080fd5b50565b61013c81610112565b811461014757600080fd5b50565b6106f6806101596000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806337d0208c1461005c578063444936af1461007a5780634e76a8461461008457806354563ef7146100a2578063d962f7cf146100ac575b600080fd5b6100646100ca565b60405161007191906104fa565b60405180910390f35b6100826100d0565b005b61008c610144565b60405161009991906104fa565b60405180910390f35b6100aa61014a565b005b6100b46103b9565b6040516100c191906104fa565b60405180910390f35b60025481565b6001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016004600082825461013b9190610526565b92505081905550565b60045481565b600260008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166304e544cf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101b257600080fd5b505afa1580156101c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ea91906103e9565b6002811115610222577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610262576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610259906104ba565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634737c0c2336040518263ffffffff1660e01b81526004016102be919061049f565b60206040518083038186803b1580156102d657600080fd5b505afa1580156102ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030e9190610412565b905060015481141561037b57600060045460025461032c919061057c565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610374573d6000803e3d6000fd5b50506103b6565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ad906104da565b60405180910390fd5b50565b60015481565b6000815190506103ce81610699565b92915050565b6000815190506103e3816106a9565b92915050565b6000602082840312156103fb57600080fd5b6000610409848285016103bf565b91505092915050565b60006020828403121561042457600080fd5b6000610432848285016103d4565b91505092915050565b610444816105ad565b82525050565b6000610457601383610515565b915061046282610647565b602082019050919050565b600061047a601b83610515565b915061048582610670565b602082019050919050565b610499816105df565b82525050565b60006020820190506104b4600083018461043b565b92915050565b600060208201905081810360008301526104d38161044a565b9050919050565b600060208201905081810360008301526104f38161046d565b9050919050565b600060208201905061050f6000830184610490565b92915050565b600082825260208201905092915050565b6000610531826105df565b915061053c836105df565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610571576105706105e9565b5b828201905092915050565b6000610587826105df565b9150610592836105df565b9250826105a2576105a1610618565b5b828204905092915050565b60006105b8826105bf565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f6e6f742072657665616c696e6720737461746500000000000000000000000000600082015250565b7f796f7520646964206e6f7420616374206163636f7264696e676c790000000000600082015250565b600381106106a657600080fd5b50565b6106b2816105df565b81146106bd57600080fd5b5056fea2646970667358221220e65bc922b07d07095046578af1676fe7351c8bd20a955ff9c21d1f2c8fbfc83764736f6c63430008040033";

export class Bribe__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _schellingAddress: string,
    _toBribe: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<Bribe> {
    return super.deploy(
      _schellingAddress,
      _toBribe,
      overrides || {}
    ) as Promise<Bribe>;
  }
  getDeployTransaction(
    _schellingAddress: string,
    _toBribe: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _schellingAddress,
      _toBribe,
      overrides || {}
    );
  }
  attach(address: string): Bribe {
    return super.attach(address) as Bribe;
  }
  connect(signer: Signer): Bribe__factory {
    return super.connect(signer) as Bribe__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BribeInterface {
    return new utils.Interface(_abi) as BribeInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Bribe {
    return new Contract(address, _abi, signerOrProvider) as Bribe;
  }
}
