/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Schelling, SchellingInterface } from "../Schelling";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "h",
        type: "bytes32",
      },
    ],
    name: "commit",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "seeCommit",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523460008190555061039e8061001a6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806356051d741461003b578063f14fcbc814610059575b600080fd5b610043610089565b60405161005091906102dc565b60405180910390f35b610073600480360381019061006e919061023b565b61015a565b60405161008091906102c1565b60405180910390f35b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000173__$614c41c9c50fcb0ed3ca03c352eb95b0f0$__63b99407ec90916040518263ffffffff1660e01b815260040161010591906102f7565b60206040518083038186803b15801561011d57600080fd5b505af4158015610131573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101559190610264565b905090565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000173__$614c41c9c50fcb0ed3ca03c352eb95b0f0$__63eaf69a789091846040518363ffffffff1660e01b81526004016101d8929190610312565b60006040518083038186803b1580156101f057600080fd5b505af4158015610204573d6000803e3d6000fd5b5050505060019050919050565b60008135905061022081610351565b92915050565b60008151905061023581610351565b92915050565b60006020828403121561024d57600080fd5b600061025b84828501610211565b91505092915050565b60006020828403121561027657600080fd5b600061028484828501610226565b91505092915050565b6102968161033b565b82525050565b6102a581610347565b82525050565b6102b481610347565b82525050565b8082525050565b60006020820190506102d6600083018461028d565b92915050565b60006020820190506102f1600083018461029c565b92915050565b600060208201905061030c60008301846102ba565b92915050565b600060408201905061032760008301856102ba565b61033460208301846102ab565b9392505050565b60008115159050919050565b6000819050919050565b61035a81610347565b811461036557600080fd5b5056fea264697066735822122038e5cede102f78c3d65029e11c8cc436d6e6f05f5666f0055bab038f5b2d967064736f6c63430008040033";

type SchellingConstructorParams =
  | [linkLibraryAddresses: SchellingLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SchellingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class Schelling__factory extends ContractFactory {
  constructor(...args: SchellingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        Schelling__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(linkLibraryAddresses: SchellingLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$614c41c9c50fcb0ed3ca03c352eb95b0f0\\$__", "g"),
      linkLibraryAddresses["contracts/CommitLib.sol:CommitLib"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  deploy(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<Schelling> {
    return super.deploy(overrides || {}) as Promise<Schelling>;
  }
  getDeployTransaction(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Schelling {
    return super.attach(address) as Schelling;
  }
  connect(signer: Signer): Schelling__factory {
    return super.connect(signer) as Schelling__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SchellingInterface {
    return new utils.Interface(_abi) as SchellingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Schelling {
    return new Contract(address, _abi, signerOrProvider) as Schelling;
  }
}

export interface SchellingLibraryAddresses {
  ["contracts/CommitLib.sol:CommitLib"]: string;
}
